// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	common "github.com/vmware-tanzu/velero/pkg/plugin/framework/common"

	mock "github.com/stretchr/testify/mock"
)

// PluginFinder is an autogenerated mock type for the PluginFinder type
type PluginFinder struct {
	mock.Mock
}

// Find provides a mock function with given fields: kind, name
func (_m *PluginFinder) Find(kind common.PluginKind, name string) bool {
	ret := _m.Called(kind, name)

	var r0 bool
	if rf, ok := ret.Get(0).(func(common.PluginKind, string) bool); ok {
		r0 = rf(kind, name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

type mockConstructorTestingTNewPluginFinder interface {
	mock.TestingT
	Cleanup(func())
}

// NewPluginFinder creates a new instance of PluginFinder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPluginFinder(t mockConstructorTestingTNewPluginFinder) *PluginFinder {
	mock := &PluginFinder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
